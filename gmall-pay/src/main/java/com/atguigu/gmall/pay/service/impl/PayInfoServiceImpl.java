package com.atguigu.gmall.pay.service.impl;import com.alibaba.dubbo.config.annotation.Reference;import com.alibaba.dubbo.config.annotation.Service;import com.alibaba.fastjson.JSON;import com.alipay.api.AlipayApiException;import com.alipay.api.AlipayClient;import com.alipay.api.request.AlipayTradeQueryRequest;import com.alipay.api.response.AlipayTradeQueryResponse;import com.atguigu.gmall.bean.OmsOrder;import com.atguigu.gmall.bean.OmsOrderItem;import com.atguigu.gmall.bean.PaymentInfo;import com.atguigu.gmall.pay.mapper.PaymentInfoMapper;import com.atguigu.gmall.service.OmsOrderItemService;import com.atguigu.gmall.service.PayInfoService;import com.atguigu.gmall.secskill.util.ActiveMQUtil;import org.apache.activemq.ActiveMQConnectionFactory;import org.apache.activemq.ScheduledMessage;import org.apache.activemq.command.ActiveMQMapMessage;import org.springframework.beans.factory.annotation.Autowired;import tk.mybatis.mapper.entity.Example;import javax.jms.*;import java.util.HashMap;import java.util.List;/** * @ClassName PayInfoServiceImpl * @Author 19680 * @Date 2020/2/15 13:08 * @Version 1.0 * @Description TODO **/@Servicepublic class PayInfoServiceImpl implements PayInfoService {    @Autowired    PaymentInfoMapper paymentInfoMapper;    @Autowired    ActiveMQUtil activeMQUtil;    @Autowired    AlipayClient alipayClient;    @Reference    OmsOrderItemService orderItemService;    @Override    public void addPayInfo(PaymentInfo paymentInfo) {        paymentInfoMapper.insertSelective(paymentInfo);    }    @Override    public void sendPaymentQueue(PaymentInfo paymentInfo){        try {            // 1.创建工厂            ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory();            // 2.创建连接            Connection connection = activeMQConnectionFactory.createConnection();            // 3.启用连接            connection.start();            // 4.获取会话工厂            Session session = connection.createSession(true,Session.SESSION_TRANSACTED);            // 5.创建队列            Queue queue = session.createQueue("PAY_SUCCESS_QUEUE");            // 6.创建消息生产者            MessageProducer producer = session.createProducer(queue);            // 7.模拟消息            ActiveMQMapMessage message = new ActiveMQMapMessage();            message.setString("out_trade_no",paymentInfo.getOrderSn());            message.setString("status",paymentInfo.getPaymentStatus());            // 8.持久化            producer.setDeliveryMode(DeliveryMode.PERSISTENT); // 持久化            // 9.发送消息            producer.send(message); // 本步骤是只发送，不提交            // 10.提交消息            session.commit();   // 本步骤提交            connection.close();        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    public PaymentInfo getPaymentInfoByOrderSn(String out_trade_no) {        Example example = new Example(PaymentInfo.class);        Example.Criteria criteria = example.createCriteria();        criteria.andEqualTo("out_trade_no",out_trade_no);        return paymentInfoMapper.selectOneByExample(example);    }    /* *     * @Author 19680     * @Email xiaojm00@163.com     * @Description 重写消息队列     * @Date 0:53 2020/2/17     * @Param [paymentInfo]     * @return void     **/    @Override    public void sendPaymentQueueOverride(PaymentInfo paymentInfo) {        try {            ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();            Connection connection = factory.createConnection();            connection.start();            Session session = connection.createSession(true, Session.SESSION_TRANSACTED);            Topic pay_success_topic = session.createTopic("PAY_SUCCESS_TOPIC");            MessageProducer producer = session.createProducer(pay_success_topic);            TextMessage textMessage = session.createTextMessage();            textMessage.setText("随便写写，看看效果");            textMessage.setText("看看多写一遍会是怎样的");            producer.setDeliveryMode(DeliveryMode.PERSISTENT);            producer.send(textMessage);            session.commit();            connection.close();        } catch (JMSException e) {            e.printStackTrace();        }    }    @Override    public void checkPayResultStatus(PaymentInfo paymentInfo, Long count) {        try {            ConnectionFactory connectionFactory = activeMQUtil.getConnectionFactory();            Connection connection = connectionFactory.createConnection();            connection.start();            Session session = connection.createSession(true,Session.SESSION_TRANSACTED);            Queue pay_result_check_queue = session.createQueue("PAY_RESULT_CHECK_QUEUE");            MessageProducer producer = session.createProducer(pay_result_check_queue);            producer.setDeliveryMode(DeliveryMode.PERSISTENT);            MapMessage mapMessage = session.createMapMessage();            mapMessage.setString("out_trade_no",paymentInfo.getOrderSn());            mapMessage.setLong("count",count);            mapMessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY,3*1000); // 延时30ms后消息才生效            producer.send(mapMessage);            session.commit();            connection.close();        } catch (JMSException e) {        }    }    @Override    public String checkPayStatus(String out_trade_no) {        AlipayTradeQueryRequest alipayTradeQueryRequest = new AlipayTradeQueryRequest();        HashMap<String, String> map = new HashMap<>();        map.put("out_trade_no",out_trade_no);        alipayTradeQueryRequest.setBizContent(JSON.toJSONString(map));        AlipayTradeQueryResponse execute = null;        try {             execute = alipayClient.execute(alipayTradeQueryRequest);        } catch (AlipayApiException e) {            e.printStackTrace();        }        boolean success = execute.isSuccess();        // 返回支付宝交易结果的四种情况        return execute.getTradeStatus();    }    @Override    public void updatePayInfo(PaymentInfo paymentInfo) {        Example example = new Example(PaymentInfo.class);        Example.Criteria criteria = example.createCriteria();        criteria.andEqualTo("orderSn",paymentInfo.getOrderSn());        paymentInfoMapper.updateByExampleSelective(paymentInfo,example);//        paymentInfoMapper.updateByPrimaryKeySelective(paymentInfo);    }    /******************************************************************************************************/    @Override    public void sendGware(OmsOrder omsOrder){        try {            ConnectionFactory connectionFactory = activeMQUtil.getConnectionFactory();            Connection connection = connectionFactory.createConnection();            Session session = connection.createSession(true, Session.SESSION_TRANSACTED);            Queue order_success_queue = session.createQueue("ORDER_SUCCESS_QUEUE");            MessageProducer producer = session.createProducer(order_success_queue);            TextMessage textMessage = session.createTextMessage();            List<OmsOrderItem> orderItems = orderItemService.getOrderItemsByOrderSn(omsOrder.getOrderSn());            omsOrder.setOmsOrderItems(orderItems);            textMessage.setText(JSON.toJSONString(omsOrder));            producer.setDeliveryMode(DeliveryMode.PERSISTENT);            producer.send(textMessage);            session.commit();            connection.close();        } catch (JMSException e) {            e.printStackTrace();        }    }}