package com.atguigu.gmall.pay.controller;import com.alibaba.dubbo.config.annotation.Reference;import com.alibaba.fastjson.JSON;import com.alipay.api.AlipayApiException;import com.alipay.api.AlipayClient;import com.alipay.api.internal.util.AlipaySignature;import com.alipay.api.request.AlipayTradePagePayRequest;import com.atguigu.gmall.annotation.LoginRequired;import com.atguigu.gmall.bean.OmsOrder;import com.atguigu.gmall.bean.OmsOrderItem;import com.atguigu.gmall.bean.PaymentInfo;import com.atguigu.gmall.pay.config.AlipayConfig;import com.atguigu.gmall.pay.constant.PayStatus;import com.atguigu.gmall.pay.util.HttpClient;import com.atguigu.gmall.service.OmsOrderItemService;import com.atguigu.gmall.service.OmsOrderService;import com.atguigu.gmall.service.PayInfoService;import com.github.wxpay.sdk.WXPayUtil;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpServletRequest;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @ClassName PayController * @Author 19680 * @Date 2020/2/14 15:53 * @Version 1.0 * @Description TODO **/@Controllerpublic class PayController {    @Autowired    AlipayClient alipayClient;    @Reference    OmsOrderItemService omsOrderItemService;    @Reference    PayInfoService payInfoService;    @Reference    OmsOrderService orderService;//    @Autowired//    WeiXinConfig weiXinConfig;    @LoginRequired(isMustLogin = true)    @RequestMapping("index")    public String index(String totalAmount, String orderId, ModelMap modelMap, HttpServletRequest request){        modelMap.put("totalAmount",totalAmount);        modelMap.put("orderId",orderId);        return "index";    }    @LoginRequired(isMustLogin = true)    @RequestMapping("alipay/submit")    @ResponseBody    public String alipay(HttpServletRequest request, String orderId){        OmsOrder order = orderService.getOrderByOrderSn(orderId);        List<OmsOrderItem> orderItemList = omsOrderItemService.getOrderItemsByOrderSn(orderId);        // 通过spring已注入//        AlipayClient alipayClient = new DefaultAlipayClient("https://openapi.alipay.com/gateway.do", APP_ID, APP_PRIVATE_KEY, FORMAT, CHARSET, ALIPAY_PUBLIC_KEY, SIGN_TYPE); //获得初始化的AlipayClient        AlipayTradePagePayRequest alipayRequest = new AlipayTradePagePayRequest();//创建API对应的request        alipayRequest.setReturnUrl(AlipayConfig.return_payment_url);        alipayRequest.setNotifyUrl(AlipayConfig.notify_payment_url);//在公共参数中设置回跳和通知地址//        alipayRequest.setBizContent("{" +//                "    \"out_trade_no\":\"20150320010101001\"," +//                "    \"product_code\":\"FAST_INSTANT_TRADE_PAY\"," +//                "    \"total_amount\":88.88," +//                "    \"subject\":\"Iphone6 16G\"," +//                "    \"body\":\"Iphone6 16G\"," +//                "    \"passback_params\":\"merchantBizType%3d3C%26merchantBizNo%3d2016010101111\"," +//                "    \"extend_params\":{" +//                "    \"sys_service_provider_id\":\"2088511833207846\"" +//                "    }"+//                "  }");//填充业务参数        // 使用map替换上面注释代码        HashMap<String, String> map = new HashMap<>();        map.put("out_trade_no",orderId);        map.put("product_code","FAST_INSTANT_TRADE_PAY");   // 支付宝的产品名        map.put("total_amount","0.01");        map.put("subject",orderItemList.get(0).getProductName());    //  订单的商品名称        String requestMap = JSON.toJSONString(map);        alipayRequest.setBizContent(requestMap);        String form="";        try {            form = alipayClient.pageExecute(alipayRequest).getBody(); //调用SDK生成表单        } catch (AlipayApiException e) {            e.printStackTrace();        }        // 创建支付信息        PaymentInfo paymentInfo = new PaymentInfo();        paymentInfo.setOrderSn(order.getOrderSn());        paymentInfo.setOrderId(order.getId());        paymentInfo.setTotalAmount(order.getTotalAmount());        paymentInfo.setPaymentStatus("未支付");        paymentInfo.setCreateTime(new Date());        paymentInfo.setSubject(orderItemList.get(0).getProductName());        payInfoService.addPayInfo(paymentInfo);        // 定时查询支付结果, 设置查询次数        payInfoService.checkPayResultStatus(paymentInfo,7L);        return form;    }    /* *     * @Author 19680     * @Email xiaojm00@163.com     * @Description 异步通知     * @Date 0:20 2020/2/17     * @Param [request, map]     * @return java.lang.String     **/    @LoginRequired(isMustLogin = true)    @ResponseBody    @RequestMapping("alipay/callback/notify")    public String callBackNotify(HttpServletRequest request, @RequestParam Map<String, String> map){        boolean isCheckPass = false;        try {            isCheckPass = AlipaySignature.rsaCheckV1(map,AlipayConfig.alipay_public_key,AlipayConfig.charset,AlipayConfig.sign_type);        } catch (AlipayApiException e) {            e.printStackTrace();        }        if (!isCheckPass){            return "验签不通过";        }        String trade_status = map.get("trade_status");        if ("TRADE_SUCCESS".equals(trade_status)){            // 检测当前支付状态            String out_trade_no = map.get("out_trade_no");            PaymentInfo paymentInfo = new PaymentInfo();            paymentInfo.setOrderSn(out_trade_no);            PaymentInfo payInfoQuery = payInfoService.getPaymentInfoByOrderSn(out_trade_no);            if (payInfoQuery == null){                return "error: not exists out_trade_no:" + out_trade_no;            }            if ("已支付".equals(payInfoQuery.getPaymentStatus())){                return "success";            }else {                PaymentInfo payInfo = new PaymentInfo();                payInfo.setPaymentStatus("已支付");                payInfo.setConfirmTime(new Date());                payInfo.setCallbackContent(map.toString());                payInfo.setOrderSn(out_trade_no);                payInfoService.addPayInfo(payInfo);                // 发生通知给订单                payInfoService.sendPaymentQueue(paymentInfo);                return "success";            }        }        return "";    }    /* *     * @Author 19680     * @Email xiaojm00@163.com     * @Description 同步回调     * @Date 10:22 2020/2/15     * @Param [request, modelMap]     * @return java.lang.String     **/    @LoginRequired(isMustLogin = true)    @RequestMapping("alipay/callback/return")    public String callBackReturn(HttpServletRequest request, ModelMap modelMap){//  支付宝支付完成返回结果如下：//        out_trade_no=atguigugmall0830158166751864920200214160518&//                method=alipay.trade.page.pay.return&//        total_amount=0.01&//                sign=ewYvFs3TGsIMnZBmHiVqouQgjIZ7dDxr9vSzhYcRoCTec9xxliP%2BHdL8dROmlpVeZ5xTw%2BB2%2BlZpZ%2Fw%2BzNefJvy2HKirkCTk04X2wSiER9a1mfCRUbCruq2DkEad%2BEZp88nwDAyKcsDT4PIIi%2FPZw6Jck5ybVNIl5g2UXUPdLSzFqEsHnp3rzfXGfOaOGOyckAT1o4ld3HvaEcC28IXJRd%2FZfk%2Fz3cZec6Lzl2RctT1dBF3TbXn8h%2BbXMe6yF3HIJ3xUZ0p7MJQgVx7Qlipqjn%2F%2BBQ1QmMTONKojlDZIT%2B1ahsbHYoLMjzVGZZq88J1wjJokSDjbVAwD4MrQ2SUUzQ%3D%3D&//                trade_no=2020021422001446271418708223&//                auth_app_id=2018020102122556&//                version=1.0&//                app_id=2018020102122556&//                sign_type=RSA2&//                seller_id=2088921750292524&//                timestamp=2020-02-14+16%3A05%3A47        // 1.解析参数返回结果        String trade_no = request.getParameter("trade_no");        String out_trade_no = request.getParameter("out_trade_no");        String auth_app_id = request.getParameter("auth_app_id");        String app_id = request.getParameter("app_id");        String seller_id = request.getParameter("seller_id");        String sign = request.getParameter("sign");//        BigDecimal totalAmount = new BigDecimal(request.getParameter("totalAmount"));        // 2.保存支付信息        OmsOrder order = orderService.getOrderByOrderSn(out_trade_no);        List<OmsOrderItem> orderItems = omsOrderItemService.getOrderItemsByOrderSn(order.getOrderSn());        order.setOmsOrderItems(orderItems);        if (order != null ){           PaymentInfo paymentInfo = new PaymentInfo();            paymentInfo.setAlipayTradeNo(trade_no);            paymentInfo.setCallbackTime(new Date());            paymentInfo.setCreateTime(order.getCreateTime());            paymentInfo.setOrderSn(out_trade_no);            paymentInfo.setPaymentStatus("已支付");            paymentInfo.setSubject(orderItems.get(0).getProductName());            paymentInfo.setCallbackContent(sign);            paymentInfo.setTotalAmount(order.getTotalAmount());            paymentInfo.setOrderId(order.getId());            // 3.1更新订单信息//            order.setStatus("1");            order.setPayType(1);            String status = payInfoService.checkPayStatus(out_trade_no);            if (PayStatus.TRADE_SUCCESS.equals(status)){                payInfoService.updatePayInfo(paymentInfo);                payInfoService.sendPaymentQueue(paymentInfo);                // 延时消息更新库存状态                payInfoService.sendGware(order);            }            // 更新缓存           orderService.flushallOrder(order.getMemberId(), out_trade_no);           return "finish";       }        return "fail";    }    @LoginRequired(isMustLogin = true)    @RequestMapping("wx/submit")    @ResponseBody    public String wxpay(HttpServletRequest request, String out_trade_no){        if (out_trade_no.length() > 32){            out_trade_no = out_trade_no.substring(0, 31);        }        Map aNativeMap = createNative(out_trade_no, "1");        String url = (String) aNativeMap.get("url");        return url;    }    private Map createNative(String orderId, String total_fee) {        //1.创建参数        Map<String,String> param=new HashMap();//创建参数        param.put("appid", "wxf913bfa3a2c7eeeb");//公众号        param.put("mch_id", "1543338551");//商户号        param.put("nonce_str", WXPayUtil.generateNonceStr());//随机字符串        param.put("body", "尚硅谷");//商品描述        param.put("out_trade_no", orderId);//商户订单号        param.put("total_fee",total_fee);//总金额（分）        param.put("spbill_create_ip", "127.0.0.1");//IP        param.put("notify_url", " http://2z72m78296.wicp.vip/wx/callback/notify");//回调地址(随便写)        param.put("trade_type", "NATIVE");//交易类型        try {            //2.生成要发送的xml            String xmlParam = WXPayUtil.generateSignedXml(param, "atguigu3b0kn9g5v426MKfHQH7X8rKwb");            System.out.println(xmlParam);            HttpClient client=new HttpClient("https://api.mch.weixin.qq.com/pay/unifiedorder");            client.setHttps(true);            client.setXmlParam(xmlParam);            client.post();            //3.获得结果            String result = client.getContent();            System.out.println(result);            Map<String, String> resultMap = WXPayUtil.xmlToMap(result);            Map<String, String> map=new HashMap<>();            map.put("code_url", resultMap.get("code_url"));//支付地址            map.put("total_fee", total_fee);//总金额            map.put("out_trade_no",orderId);//订单号            return map;        } catch (Exception e) {            e.printStackTrace();            return new HashMap<>();        }    }}