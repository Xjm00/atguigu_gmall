package com.atguigu.gmall.search.controller;import com.alibaba.dubbo.config.annotation.Reference;import com.atguigu.gmall.bean.*;import com.atguigu.gmall.service.PmsBaseAttrInfoService;import com.atguigu.gmall.service.PmsBaseAttrValueService;import com.atguigu.gmall.service.PmsSearchService;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.RequestMapping;import javax.servlet.http.HttpServletRequest;import java.io.IOException;import java.util.ArrayList;import java.util.HashSet;import java.util.Iterator;import java.util.List;/** * @ClassName SearchController * @Author 19680 * @Date 2020/1/14 12:36 * @Version 1.0 * @Description TODO **/@Controller@CrossOriginpublic class SearchController {    @Autowired    PmsSearchService pmsSearchService;    @Reference    PmsBaseAttrInfoService pmsBaseAttrInfoService;    @Reference    PmsBaseAttrValueService pmsBaseAttrValueService;    @RequestMapping("index.html")    public String index(HttpServletRequest request,ModelMap modelMap) {        Object nickname = request.getAttribute("nickname");        modelMap.put("nickname",nickname);        return "index";    }    @RequestMapping("list.html")    public String list(PmsSearchParam pmsSearchParam, ModelMap modelMap) {        // 排除传参时数据丢失        if (pmsSearchParam.getKeyword() == null || "".equals(pmsSearchParam.getKeyword())){            if (pmsSearchParam.getCatalog3Id() == null || StringUtils.isBlank(pmsSearchParam.getCatalog3Id())){                if (pmsSearchParam.getValueId() == null || pmsSearchParam.getValueId().length == 0){                    return "redirect:/index.html";                }            }        }        List<PmsSearchSkuInfo> pmsSearchSkuInfoList = null;        try {            pmsSearchSkuInfoList = pmsSearchService.search(pmsSearchParam);        } catch (IOException e) {            e.printStackTrace();        }        if (pmsSearchSkuInfoList != null && pmsSearchSkuInfoList.size() > 0) {            HashSet<String> set = new HashSet<>();            for (PmsSearchSkuInfo searchSkuInfo : pmsSearchSkuInfoList) {                List<PmsSkuAttrValue> skuAttrValueList = searchSkuInfo.getSkuAttrValueList();                for (PmsSkuAttrValue skuAttrValue : skuAttrValueList) {                    String valueId = skuAttrValue.getValueId();                    set.add(valueId);                }            }            List<PmsBaseAttrInfo> pmsBaseAttrInfos = pmsBaseAttrInfoService.getAttrInfoListByValueIds(set);            String[] valueIds = pmsSearchParam.getValueId();            if (valueIds != null && valueIds.length > 0) {                for (String valueId : valueIds) {                    Iterator<PmsBaseAttrInfo> iterator = pmsBaseAttrInfos.iterator();                    while (iterator.hasNext()) {                        PmsBaseAttrInfo pmsBaseAttrInfo = iterator.next();                        List<PmsBaseAttrValue> attrValueList = pmsBaseAttrInfo.getAttrValueList();                        for (PmsBaseAttrValue pmsBaseAttrValue : attrValueList) {                            String attrValueId = pmsBaseAttrValue.getId();                            if (valueId.equals(attrValueId)) {                                iterator.remove();                            }                        }                    }                }            }            if (valueIds != null && valueIds.length > 0) {                ArrayList<PmsSearchCrumb> pmsSearchCrumbs = new ArrayList<>();                for (String valueId : valueIds) {                    PmsSearchCrumb pmsSearchCrumb = new PmsSearchCrumb();                    pmsSearchCrumb.setValueId(valueId);                    pmsSearchCrumb.setValueName(pmsBaseAttrValueService.getBaseAttrValueById(valueId).getValueName());                    pmsSearchCrumb.setUrlParam(getAllUrlParam(pmsSearchParam, valueId));                    pmsSearchCrumbs.add(pmsSearchCrumb);                }                modelMap.addAttribute("attrValueSelectedList", pmsSearchCrumbs);            }            modelMap.addAttribute("skuLsInfoList", pmsSearchSkuInfoList);            modelMap.addAttribute("PmsSearchParam", pmsSearchParam);            modelMap.addAttribute("attrList", pmsBaseAttrInfos);            modelMap.put("urlParam", getAllUrlParam(pmsSearchParam));        }        return "list";    }    private String getAllUrlParam(PmsSearchParam pmsSearchParam, String... valueIdForDelete){        String urlParam = "";        String catalog3Id = pmsSearchParam.getCatalog3Id();        String keyword = pmsSearchParam.getKeyword();        String[] valueIds = pmsSearchParam.getValueId();        if (StringUtils.isNotBlank(catalog3Id)) {            urlParam = urlParam + "catalog3Id=" + catalog3Id;        }        if (StringUtils.isNotBlank(keyword)) {            if (StringUtils.isNotBlank(urlParam)) {                urlParam += "&keyword=" + keyword;            } else {                urlParam += "keyword=" + keyword;            }        }        if (valueIds != null && valueIds.length > 0) {            for (String valueId : valueIds) {//                if (!(valueIdForDelete != null && valueIdForDelete.length > 0 && valueIdForDelete[0s].equals(valueId))) {//                    urlParam += "&valueId=" + valueId;//                }                // 等同上面代码                if (valueIdForDelete != null && valueIdForDelete.length > 0){                    if (!valueIdForDelete[0].equals(valueId)){                        urlParam += "&valueId=" + valueId;                    }                }else {                    urlParam += "&valueId=" + valueId;                }            }        }        return urlParam;    }    /*****用getAllUrlParam合并以下代码********************************************************************************/    private String getCrumbUrlParam(PmsSearchParam pmsSearchParam, String valueIdForDelete) {        String urlParam = "";        String catalog3Id = pmsSearchParam.getCatalog3Id();        String keyword = pmsSearchParam.getKeyword();        String[] valueIds = pmsSearchParam.getValueId();        if (StringUtils.isNotBlank(catalog3Id)) {            urlParam = urlParam + "catalog3Id=" + catalog3Id;        }        if (StringUtils.isNotBlank(keyword)) {            if (StringUtils.isNotBlank(urlParam)) {                urlParam += "&keyword=" + keyword;            } else {                urlParam += "keyword=" + keyword;            }        }        if (valueIds != null && valueIds.length > 0) {            for (String valueId : valueIds) {                if (!valueIdForDelete.equals(valueId)) {                    urlParam += "&valueId=" + valueId;                }            }        }        return urlParam;    }    private String getUrlParam(PmsSearchParam pmsSearchParam) {        String urlParam = "";        String catalog3Id = pmsSearchParam.getCatalog3Id();        String keyword = pmsSearchParam.getKeyword();        String[] valueIds = pmsSearchParam.getValueId();        if (StringUtils.isNotBlank(catalog3Id)) {            urlParam += "catalog3Id=" + catalog3Id;        }        if (StringUtils.isNotBlank(keyword)) {            if (StringUtils.isNotBlank(urlParam)) {                urlParam += "&keyword=" + keyword;            } else {                urlParam += "keyword=" + keyword;            }        }        if (valueIds != null && valueIds.length > 0) {            for (String valueId : valueIds) {                urlParam += "&valueId=" + valueId;            }        }        return urlParam;    }}