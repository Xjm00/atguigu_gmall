package com.atguigu.gmall.secskill.controller;import com.alibaba.dubbo.config.annotation.Reference;import com.alibaba.fastjson.JSON;import com.atguigu.gmall.bean.OmsCartItem;import com.atguigu.gmall.bean.PmsProductInfo;import com.atguigu.gmall.bean.PmsSkuInfo;import com.atguigu.gmall.service.OmsCartItemService;import com.atguigu.gmall.service.PmsProductInfoService;import com.atguigu.gmall.service.PmsSkuService;import com.atguigu.gmall.utils.CookieUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.RequestMapping;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.math.BigDecimal;import java.text.CollationKey;import java.util.ArrayList;import java.util.Date;import java.util.List;/** * @ClassName CartController * @Author 19680 * @Date 2020/1/17 14:36 * @Version 1.0 * @Description TODO **/@Controller@CrossOriginpublic class CartController {    @Reference    PmsSkuService pmsSkuService;    @Reference    PmsProductInfoService pmsProductInfoService;    @Reference    OmsCartItemService omsCartItemService;    @RequestMapping("cartList")    public String cartList(HttpServletRequest request, ModelMap modelMap) {        List<OmsCartItem> omsCartItemList = new ArrayList<>();        String userId = "25";        if (StringUtils.isNotBlank(userId)){            // 查缓存            omsCartItemList = omsCartItemService.getCartItemsCacheByUserId(userId);            if (!(omsCartItemList.size() > 0)){                omsCartItemList = omsCartItemService.getAllOmsCartItemList(userId);            }else {                // cache和DB都没有查询到，那么提示购物车为空            }        }else {            // 查cookie            String cartListCookies = CookieUtils.getCookiValue(request, "cartListCookies", true);            if (cartListCookies != null){                omsCartItemList = JSON.parseArray(cartListCookies, OmsCartItem.class);            }else {                // 提示购物车为空，请添加            }        }        BigDecimal sumPrice = new BigDecimal(0);        for (OmsCartItem omsCartItem : omsCartItemList) {            if ("1".equals(omsCartItem.getIsChecked())){                sumPrice = sumPrice.add(omsCartItem.getTotalPrice());            }        }        modelMap.addAttribute("sumPrice",sumPrice);        modelMap.addAttribute("cartList", omsCartItemList);        return "cartList";    }    @RequestMapping("addToCart")    public String addToCart(String skuId, String cartCount, HttpServletRequest request, HttpServletResponse response) {        List<OmsCartItem> cartList = new ArrayList<>();        OmsCartItem cartInfo = new OmsCartItem();        PmsSkuInfo pmsSkuInfo = pmsSkuService.getPmsSkuInfo(skuId);        String productId = pmsSkuInfo.getProductId();        pmsSkuInfo.setSkuNum(cartCount);        List<PmsProductInfo> productInfoList = pmsProductInfoService.getPmsProductInfosBySpuId(productId);        PmsProductInfo pmsProductInfo = productInfoList.get(0);        cartInfo.setProductId(pmsProductInfo.getId());        cartInfo.setProductName(pmsProductInfo.getSpuName());        cartInfo.setProductSkuId(pmsSkuInfo.getId());        cartInfo.setProductName(pmsSkuInfo.getSkuName());        cartInfo.setPrice(pmsSkuInfo.getPrice());        cartInfo.setQuantity(new BigDecimal(cartCount));        BigDecimal totalPrice = pmsSkuInfo.getPrice().multiply(new BigDecimal(cartCount));        cartInfo.setTotalPrice(totalPrice);        cartInfo.setProductPic(pmsSkuInfo.getSkuDefaultImg());        cartInfo.setCreateDate(new Date());        cartInfo.setIsChecked("1");        cartList.add(cartInfo);        String userId = "25";        List<OmsCartItem> omsCartItems = new ArrayList<>();        cartInfo.setMemberId(userId);        if (StringUtils.isNotBlank(userId)) {            //此时用户已登录状态            List<OmsCartItem> omsCartItemList = omsCartItemService.getAllOmsCartItemList();            boolean result = comparate(omsCartItemList, cartInfo);            if (result) {                // 此时添加的商品，购物车不存在，进行新增                omsCartItemService.saveOmsCartItem(cartInfo);            } else {                // 此时添加的商品，购物车中已存在，进行修改                for (OmsCartItem omsCartItem : omsCartItemList) {                    if (omsCartItem.getProductSkuId().equals(cartInfo.getProductSkuId())) {                        cartInfo.setId(omsCartItem.getId());                        cartInfo.setQuantity(cartInfo.getQuantity().add(omsCartItem.getQuantity()));                        cartInfo.setTotalPrice(cartInfo.getQuantity().multiply(cartInfo.getPrice()));                        omsCartItemService.saveOmsCartItem(cartInfo);                    }                }            }            // 添加或更新缓存(本项目是由redis作为缓存,hash进行存储)            omsCartItemService.combineCart(userId);        } else {            // 此时用户未登录状态            String cartListCookie = CookieUtils.getCookiValue(request, "cartListCookies", true);            // 判读cookie中是否有购物车列表信息            if (StringUtils.isNotBlank(cartListCookie)) {                // 1.购物车存在商品                // 判断此时添加的商品是否与购物车中相同，即skuInfo一致                omsCartItems = JSON.parseArray(cartListCookie, OmsCartItem.class);                boolean result = comparate(omsCartItems, cartInfo);                if (result) {                    // 有购物车列表，但不存在此sku一致商品时，新增                    omsCartItems.add(cartInfo);                } else {                    // 购物车存在此sku一致商品时，修改，即：增加数量                    for (OmsCartItem omsCartItem : omsCartItems) {                        if (omsCartItem.getProductSkuId().equals(cartInfo.getProductSkuId())) {                            omsCartItem.setQuantity(omsCartItem.getQuantity().add(cartInfo.getQuantity()));                            cartInfo.setTotalPrice(cartInfo.getQuantity().multiply(cartInfo.getPrice()));                        }                    }                }            } else {                // 购物车列表为空时，直接新增此时商品                omsCartItems.add(cartInfo);            }            // 2.覆盖cookie            CookieUtils.setCookie(request, response, "cartListCookies", JSON.toJSONString(omsCartItems), 1000*60*60, true);        }        return "redirect:/success.html";    }    private boolean comparate(List<OmsCartItem> omsCartItems, OmsCartItem cartInfo) {        for (OmsCartItem omsCartItem : omsCartItems) {            if (omsCartItem.getProductSkuId().equals(cartInfo.getProductSkuId())) {                return false;            }        }        return true;    }    @RequestMapping("checkCart")    public String checkBoxOne(String skuId, String isChecked, ModelMap modelMap,HttpServletRequest request,HttpServletResponse response){        List<OmsCartItem> omsCartItemList = new ArrayList<>();        String userId = "25";        BigDecimal sumPrice = new BigDecimal(0.00);        if (StringUtils.isNotBlank(userId)){            // 从缓存中查找//            omsCartItemList = omsCartItemService.getCartItemsCacheByUserId(userId);//            omsCartItemList = omsCartItemService.getAllOmsCartItemList(userId);//            // 同步缓存//            omsCartItemService.combineCart(userId);            // 1.从缓存中查找数据            List<OmsCartItem> omsCartItems = omsCartItemService.getAllOmsCartItemList(userId);            if (omsCartItems != null && omsCartItems.size() > 0){                for (OmsCartItem omsCartItem : omsCartItems) {                    if (skuId.equals(omsCartItem.getProductSkuId())){                        omsCartItem.setIsChecked(isChecked);                        omsCartItemService.saveOmsCartItem(omsCartItem);                    }                }                omsCartItemList.addAll(omsCartItems);            }            // 同步缓存            omsCartItemService.combineCart(userId);        }else {            // 未登录，查找Cookie            String cartListCookies = CookieUtils.getCookiValue(request, "cartListCookies", true);            omsCartItemList = JSON.parseArray(cartListCookies, OmsCartItem.class);        }        for (OmsCartItem omsCartItem : omsCartItemList) {            if ("1".equals(omsCartItem.getIsChecked())){                sumPrice = sumPrice.add(omsCartItem.getTotalPrice());            }        }        String cookieName = "cartListCookies";        String cookeiValue = JSON.toJSONString(omsCartItemList);        CookieUtils.setCookie(request,response,cookieName,cookeiValue ,1000*60*60,true);        modelMap.put("cartList", omsCartItemList);        modelMap.put("sumPrice",sumPrice);        return "cartListInner";    }    @RequestMapping("delCart")    public String delCart(HttpServletRequest request, HttpServletResponse response, String productSkuId, ModelMap modelMap){        String userId = "25";        List<OmsCartItem> omsCartItems = new ArrayList<>();        if (StringUtils.isNotBlank(userId)){            // 已登录时，输出数据库和缓存            omsCartItemService.delCacheBySkuId(userId,productSkuId);// 此时已同步缓存            omsCartItemService.deleteOmsCartBySkuId(userId, productSkuId);            omsCartItems = omsCartItemService.getAllOmsCartItemList(userId);//            // 同步缓存//            omsCartItemService.combineCart(userId);        }else {            // 未登录时，删除cookie            String cartListCookies = CookieUtils.getCookiValue(request, "cartListCookies", true);            if (cartListCookies != null && cartListCookies.length() > 0){                List<OmsCartItem> omsCartItemList = (List<OmsCartItem>) JSON.parseObject(cartListCookies, ArrayList.class);                for (OmsCartItem omsCartItem : omsCartItemList) {                    if (!productSkuId.equals(omsCartItem.getProductSkuId())){                        omsCartItems.add(omsCartItem);                    }                }                CookieUtils.setCookie(request,response,"cartListCookies",JSON.toJSONString(omsCartItems),1000*60*60,true);            }        }        // 计算购物车被选中的总价        BigDecimal sumPrice = new BigDecimal(0);        for (OmsCartItem omsCartItem : omsCartItems) {            if ("1".equals(omsCartItem.getIsChecked())){                sumPrice = sumPrice.add(omsCartItem.getTotalPrice());            }        }        modelMap.addAttribute("sumPrice",sumPrice);        modelMap.addAttribute("cartList", omsCartItems);        return "cartList";    }}