package com.atguigu.gmall.cart.service.impl;import com.alibaba.dubbo.config.annotation.Service;import com.alibaba.fastjson.JSON;import com.atguigu.gmall.bean.OmsCartItem;import com.atguigu.gmall.cart.mapper.OmsCartItemMapper;import com.atguigu.gmall.service.OmsCartItemService;import com.atguigu.gmall.secskill.util.RedisUtil;import org.springframework.beans.factory.annotation.Autowired;import redis.clients.jedis.Jedis;import java.util.ArrayList;import java.util.HashMap;import java.util.List;/** * @ClassName OmsCartItemServiceImpl * @Author 19680 * @Date 2020/1/23 18:40 * @Version 1.0 * @Description TODO **/@Servicepublic class OmsCartItemServiceImpl implements OmsCartItemService {    @Autowired    RedisUtil redisUtil;    @Autowired    OmsCartItemMapper omsCartItemMapper;    @Override    public void saveOmsCartItem(OmsCartItem cartInfo) {        if (cartInfo.getId() == null){            omsCartItemMapper.insertSelective(cartInfo);        }else {            omsCartItemMapper.updateByPrimaryKeySelective(cartInfo);        }    }    @Override    public List<OmsCartItem> getAllOmsCartItemList() {        return omsCartItemMapper.selectAll();    }    @Override    public List<OmsCartItem> getAllOmsCartItemList(String userId) {        OmsCartItem omsCartItem = new OmsCartItem();        omsCartItem.setMemberId(userId);        return omsCartItemMapper.select(omsCartItem);    }    @Override    public void deleteOmsCartBySkuId(String userId, String productSkuId) {        OmsCartItem omsCartItem = new OmsCartItem();        omsCartItem.setMemberId(userId);        omsCartItem.setProductSkuId(productSkuId);        omsCartItemMapper.delete(omsCartItem);    }    @Override    public void delCacheBySkuId(String userId, String productSkuId) {        HashMap<String, String> map = new HashMap<>();        Jedis jedis = redisUtil.getJedis();        List<String> hvals = jedis.hvals("userId:" + userId + ":cart");        for (String hval : hvals) {            OmsCartItem omsCartItem = JSON.parseObject(hval, OmsCartItem.class);            if (!productSkuId.equals(omsCartItem.getProductSkuId())){                map.put(omsCartItem.getProductSkuId(),JSON.toJSONString(omsCartItem));            }        }        jedis.hmset("userId:" + userId + ":cart", map);        jedis.close();    }    @Override    public void delCartByIsChecked(String userId) {        ArrayList<OmsCartItem> omsCartItems = new ArrayList<>();        List<OmsCartItem> omsCartItemList = omsCartItemMapper.selectAll();        for (OmsCartItem omsCartItem : omsCartItemList) {            if ("1".equals(omsCartItem.getIsChecked())){                omsCartItems.add(omsCartItem);            }        }        // 更新数据库        for (OmsCartItem omsCartItem : omsCartItems) {            omsCartItemMapper.delete(omsCartItem);        }        // 更新缓存        combineCart(userId);    }    @Override    public List<OmsCartItem> getCartItemsCacheIsCheckedByUserId(String userId) {        ArrayList<OmsCartItem> omsCartItems = new ArrayList<>();        Jedis jedis = redisUtil.getJedis();        String key = "userId:" + userId + ":cart";        List<String> hvals = jedis.hvals(key);        for (String hval : hvals) {            OmsCartItem omsCartItem = new OmsCartItem();            omsCartItem = JSON.parseObject(hval, OmsCartItem.class);            if ("1".equals(omsCartItem.getIsChecked())){                omsCartItems.add(omsCartItem);            }        }        try {            jedis.close();        } catch (Exception e) {            e.printStackTrace();        }        return omsCartItems;    }    @Override    public List<OmsCartItem> getCartItemIsCheckedByUserId(String userId) {        List<OmsCartItem> cartItemList = new ArrayList<>();        OmsCartItem omsCartItem = new OmsCartItem();        omsCartItem.setMemberId(userId);        omsCartItem.setIsChecked("1");        cartItemList = omsCartItemMapper.select(omsCartItem);        return cartItemList;    }    @Override    public OmsCartItem getOmsCartItemById(OmsCartItem omsCartItem) {        return omsCartItemMapper.selectByPrimaryKey(omsCartItem);    }    /* *     * @Author 19680     * @Email xiaojm00@163.com     * @Description 新增缓存     * @Date 13:52 2020/2/2     * @Param [userId]     * @return void     **/    @Override    public void combineCart(String userId) {        List<OmsCartItem> omsCartItemList = omsCartItemMapper.selectAll();        Jedis jedis = redisUtil.getJedis();        HashMap<String, String> map = new HashMap<>();        for (OmsCartItem omsCartItem : omsCartItemList) {            map.put(omsCartItem.getProductSkuId(), JSON.toJSONString(omsCartItem));        }        jedis.del("userId:" + userId + ":cart");        if (map != null && map.size() > 0){            jedis.hmset("userId:" + userId + ":cart",map);        }        try {            jedis.close();        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    public List<OmsCartItem> getCartItemsCacheByUserId(String userId) {        ArrayList<OmsCartItem> omsCartItems = new ArrayList<>();        Jedis jedis = redisUtil.getJedis();        List<String> hvals = jedis.hvals("userId:" + userId + ":cart");        if (hvals != null && hvals.size() > 0){            for (String hval : hvals) {                OmsCartItem omsCartItem = JSON.parseObject(hval, OmsCartItem.class);                omsCartItems.add(omsCartItem);            }        }        try {            jedis.close();        } catch (Exception e) {            e.printStackTrace();        }        return omsCartItems;    }}