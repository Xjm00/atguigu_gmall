package com.atgugiu.gmall.item.contoller;import com.alibaba.dubbo.config.annotation.Reference;import com.alibaba.fastjson.JSON;import com.atguigu.gmall.bean.PmsProductSaleAttr;import com.atguigu.gmall.bean.PmsSkuInfo;import com.atguigu.gmall.bean.PmsSkuSaleAttrValue;import com.atguigu.gmall.service.PmsProductSaleAttrService;import com.atguigu.gmall.service.PmsSkuService;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import javax.servlet.http.HttpSession;import java.util.*;/** * @ClassName ItemController * @Author 19680 * @Date 2020/1/10 18:45 * @Version 1.0 * @Description TODO **/@CrossOrigin@Controllerpublic class ItemController {    @Reference    PmsSkuService pmsSkuService;    @Reference    PmsProductSaleAttrService pmsProductSaleAttrService;    @RequestMapping("{skuid}.html")    public String getPmsSkuInfo(@PathVariable String skuid, ModelMap modelMap) {        UUID uuid = UUID.randomUUID();        modelMap.put("uuid",uuid);        PmsSkuInfo pmsSkuInfo = pmsSkuService.getPmsSkuInfo(skuid);        modelMap.addAttribute("skuInfo", pmsSkuInfo);        String productId = pmsSkuInfo.getProductId();        List<PmsProductSaleAttr> pmsProductSaleAttrList =                pmsProductSaleAttrService.spuSaleAttrListCheckBySkuId(productId, skuid);        modelMap.addAttribute("spuSaleAttrListCheckBySku", pmsProductSaleAttrList);//        在用户查询商品详情时//        将商品skuId对应销售属性值组合的MAP隐藏到页面//        然后用户在点击销售属性值,不进行后台查询，直接对应查找前台的map中是否包含skuId        List<PmsSkuInfo> pmsSkuInfoList = pmsSkuService.getPmsSkuSaleAttrValueBySpuId(productId);        Map<String, String> map = new HashMap<>();        for (PmsSkuInfo skuInfo : pmsSkuInfoList) {            List<PmsSkuSaleAttrValue> skuSaleAttrValueList = skuInfo.getSkuSaleAttrValueList();            String value = "";            for (PmsSkuSaleAttrValue pmsSkuSaleAttrValue : skuSaleAttrValueList) {                value = value + "|" + pmsSkuSaleAttrValue.getSaleAttrValueId();            }            map.put(value, skuInfo.getId());        }        String json = JSON.toJSONString(map);        modelMap.addAttribute("skuIdMap", json);        return "item";    }    @RequestMapping("shangpinxiangqing")    public String shangpinxiangqing() {        return "shangpinxiangqing";    }    /*******重写*************************************************************************************************/    @RequestMapping("{skuid}.htm")    public String toItem(@PathVariable("skuid") String skuid, ModelMap modelMap) {        PmsSkuInfo pmsSkuInfo = pmsSkuService.getPmsSkuInfo(skuid);        modelMap.addAttribute("skuInfo", pmsSkuInfo);        String productId = pmsSkuInfo.getProductId();        List<PmsProductSaleAttr> pmsProductSaleAttrs = pmsProductSaleAttrService.spuSaleAttrListCheckBySkuId(productId, skuid);        modelMap.addAttribute("spuSaleAttrListCheckBySku", pmsProductSaleAttrs);        List<PmsSkuInfo> skuSaleAttrValueBySpuId = pmsSkuService.getPmsSkuSaleAttrValueBySpuId(productId);        Map<String, String> map = new HashMap<>();        for (PmsSkuInfo skuInfo : skuSaleAttrValueBySpuId) {            String skuInfoId = skuInfo.getId();            List<PmsSkuSaleAttrValue> skuSaleAttrValueList = skuInfo.getSkuSaleAttrValueList();            String key = "";            for (PmsSkuSaleAttrValue pmsSkuSaleAttrValue : skuSaleAttrValueList) {                String skuSaleAttrValueId = pmsSkuSaleAttrValue.getSaleAttrValueId();                key = key + "|" + skuSaleAttrValueId;            }            map.put(key, skuInfoId);        }        modelMap.addAttribute("skuIdMap", JSON.toJSONString(map));        return "item";    }    /***********************************************************************************************/// thymeleaf测试代码：    @RequestMapping("test")    public String testThymeleaf(ModelMap map, HttpSession session) {        map.put("hello", "hi");        ArrayList arrayList = new ArrayList();        for (int i = 0; i < 5; i++) {            arrayList.add("测试" + i);        }        map.put("hellos", arrayList);        session.setAttribute("user", "tom");        return "hello";    }    @RequestMapping("item")    public String item() {        return "item";    }// 测试用代码/*************************************************************************************************/}