package com.atguigu.gmall.user.service.impl;import com.alibaba.dubbo.config.annotation.Service;import com.alibaba.fastjson.JSON;import com.atguigu.gmall.bean.UmsMember;import com.atguigu.gmall.bean.UmsMemberExample;import com.atguigu.gmall.bean.UmsMemberReceiveAddress;import com.atguigu.gmall.service.UserService;import com.atguigu.gmall.user.mapper.UmsMemberMapper;import com.atguigu.gmall.user.mapper.UmsMemberReceiveAddressMapper;import com.atguigu.gmall.secskill.util.RedisUtil;import org.springframework.beans.factory.annotation.Autowired;import redis.clients.jedis.Jedis;import java.util.List;@Servicepublic class UserServiceImpl implements UserService {    @Autowired    UmsMemberMapper umsMemberMapper;    @Autowired    UmsMemberReceiveAddressMapper umsMemberReceiveAddressMapper;    @Autowired    RedisUtil redisUtil;    @Override    public List<UmsMember> getUmsMemberAll() {        return umsMemberMapper.selectAll();    }    @Override    public UmsMember getUserById(String id) {        Long umsMemberId = new Long(Long.parseLong(id));        return umsMemberMapper.selectByPrimaryKey(umsMemberId);    }    @Override    public int removeUserByExample(UmsMemberExample example) {        return umsMemberMapper.deleteByExample(example);    }    @Override    public int saveUser(UmsMember umsMember) {        return umsMemberMapper.insert(umsMember);    }    @Override    public int replaceUserByPrimaryKeySelective(UmsMember umsMember) {        return umsMemberMapper.updateByPrimaryKeySelective(umsMember);    }    @Override    public UmsMember login(UmsMember umsMember) {//        UmsMember umsMemberForDb = new UmsMember();//        umsMemberForDb.setUserName(umsMember.getUserName());//        umsMemberForDb.setPassWord(umsMember.getPassWord());        UmsMember member = umsMemberMapper.selectOne(umsMember);        if (member != null){            // 同步缓存数据        }        return member;    }    @Override    public void putTokenForCache(String token, UmsMember umsMember) {        Jedis jedis = redisUtil.getJedis();        String key = "user:" + token + ":token";        jedis.setex(key,60*60, JSON.toJSONString(umsMember));        jedis.close();    }    @Override    public UmsMember verify(String token) {        Jedis jedis = redisUtil.getJedis();        String json = jedis.get("user:" + token + ":token");        UmsMember umsMember = JSON.parseObject(json, UmsMember.class);        jedis.close();        return umsMember;    }    @Override    public UmsMemberReceiveAddress getUmsMemberReceiveAddressByUserId(String userId,String addressId) {        UmsMemberReceiveAddress umsMemberReceiveAddress = new UmsMemberReceiveAddress();        umsMemberReceiveAddress.setMemberId(userId);        umsMemberReceiveAddress.setId(addressId);        return umsMemberReceiveAddressMapper.selectOne(umsMemberReceiveAddress);    }}