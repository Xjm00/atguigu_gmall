package com.atguigu.gmall.order.controller;import com.alibaba.dubbo.config.annotation.Reference;import com.atguigu.gmall.annotation.LoginRequired;import com.atguigu.gmall.bean.OmsCartItem;import com.atguigu.gmall.bean.OmsOrder;import com.atguigu.gmall.bean.OmsOrderItem;import com.atguigu.gmall.bean.UmsMemberReceiveAddress;import com.atguigu.gmall.service.*;import com.atguigu.gmall.secskill.util.RedisUtil;import com.atguigu.gmall.utils.CookieUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.RequestMapping;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.List;/** * @ClassName OrderController * @Author 19680 * @Date 2020/2/7 22:21 * @Version 1.0 * @Description TODO **/@Controller@CrossOriginpublic class OrderController {    @Reference    UmsMemberReceiveAddressService umsMemberReceiveAddressService;    @Reference    OmsCartItemService cartItemService;    @Reference    UserService userService;    @Reference    OmsOrderService orderService;    @Reference    OmsOrderItemService orderItemService;    @Autowired    RedisUtil redisUtil;    @LoginRequired(isMustLogin = true)    @RequestMapping("toTrade")    public String toTrade(HttpServletRequest request, HttpServletResponse response, String newToken, ModelMap modelMap){        String userId = (String)request.getAttribute("userId");        String nickname = (String) request.getAttribute("nickname");        CookieUtils.setCookie(request,response,"nickname",nickname,1000*60,true);        BigDecimal totalAmount = new BigDecimal(0);        // 收获地址        List<UmsMemberReceiveAddress> umsMeberReceiveAddressList = umsMemberReceiveAddressService.getUmsMeberReceiveAddressListById(userId);        modelMap.put("userAddressList", umsMeberReceiveAddressList);        // 显示结算数据，根据购物车中选中商品生成        List<OmsCartItem> cartItemList = cartItemService.getCartItemsCacheIsCheckedByUserId(userId);        boolean result = true;        if(cartItemList == null || cartItemList.size() == 0){            cartItemList = cartItemService.getCartItemIsCheckedByUserId(userId);            if (cartItemList == null || cartItemList.size() == 0){                result = false;            }        }        List<OmsOrderItem> omsOrderItems = new ArrayList<>();        if (result){            for (OmsCartItem omsCartItem : cartItemList) {                OmsOrderItem omsOrderItem = new OmsOrderItem();                omsOrderItem.setProductId(omsCartItem.getProductId());                omsOrderItem.setProductPic(omsCartItem.getProductPic());                omsOrderItem.setProductName(omsCartItem.getProductName());                omsOrderItem.setProductAttr(omsCartItem.getProductAttr());                omsOrderItem.setProductPrice(omsCartItem.getPrice());                omsOrderItem.setProductSkuCode(omsCartItem.getProductSkuCode());                omsOrderItem.setProductQuantity(omsCartItem.getQuantity());                omsOrderItem.setProductBrand(omsCartItem.getProductBrand());                omsOrderItem.setProductCategoryId(omsCartItem.getProductCategoryId());                omsOrderItems.add(omsOrderItem);                totalAmount = totalAmount.add(omsCartItem.getTotalPrice());            }        }else {            modelMap.put("errMsg","提交空订单，请前往购物车选中商品后提交");            return "tradeFail";        }        // 显示其他数据，如用户收获地址，券，活动，支付方式        modelMap.put("orderDetailList",omsOrderItems);        modelMap.put("nickname",nickname);        modelMap.put("totalAmount",totalAmount);        return "trade";    }    @LoginRequired(isMustLogin = true)    @RequestMapping("submitOrder")    public String submitOrder(HttpServletRequest request, String addressId, ModelMap modelMap){        String userId = (String) request.getAttribute("userId");        String nickname = (String) request.getAttribute("nickname");        BigDecimal totalAmount = new BigDecimal(request.getParameter("totalAmount"));        // 获取收货地址        UmsMemberReceiveAddress umsMemberReceiveAddress = userService.getUmsMemberReceiveAddressByUserId(userId, addressId);        // 1.从购物车中获取选中提交的商品信息        List<OmsCartItem> omsCartItemList = cartItemService.getAllOmsCartItemList(userId);        boolean result = false;        for (OmsCartItem omsCartItem : omsCartItemList) {            if ("1".equals(omsCartItem.getIsChecked())){                result = true;            }        }        if (result){            // 2.创建一个大订单            OmsOrder omsOrder = new OmsOrder();            omsOrder.setMemberId(userId);            Date date = new Date();            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmss");            String format = simpleDateFormat.format(date);            omsOrder.setOrderSn("atguigugmall0830" + format);            omsOrder.setCreateTime(date);            omsOrder.setMemberUsername(nickname);            omsOrder.setStatus("0");            omsOrder.setNote("硅谷订单");            omsOrder.setTotalAmount(totalAmount);//        private String couponId; // 优惠券id//        private BigDecimal payAmount;   // 应付金额（实际支付金额）//        private BigDecimal freightAmount; // 运费//        private BigDecimal promotionAmount; // 促销优化金额（促销价、满减、阶梯价）//        private BigDecimal integrationAmount; // 积分抵扣金额//        private BigDecimal couponAmount; // 优惠券抵扣金额//        private BigDecimal discountAmount;  // 管理员后台调整订单使用的折扣金额//        private int payType;    // 支付方式：0->未支付；1->支付宝；2->微信//        private int sourceType; // 订单来源：0->PC订单；1->app订单//        private int orderType;  // 订单类型：0->正常订单；1->秒杀订单//        private String deliveryCompany; // 物流公司(配送方式)//        private String deliverySn;  // 物流单号//        private int autoConfirmDay; // 自动确认时间（天）//        private int integration; // 可以获得的积分//        private int growth; // 可以活动的成长值//        private String promotionInfo; // 活动消息//        private int billType;   // 发票类型：0->不开发票；1->电子发票；2->纸质发票//        private String billHeader;  // 发票抬头//        private String billContent; // 发票内容            omsOrder.setReceiverName(umsMemberReceiveAddress.getName());            omsOrder.setReceiverCity(umsMemberReceiveAddress.getCity());            omsOrder.setReceiverPhone(umsMemberReceiveAddress.getPhoneNumber());            omsOrder.setReceiverProvince(umsMemberReceiveAddress.getProvince());            omsOrder.setReceiverDetailAddress(umsMemberReceiveAddress.getDetailAddress());            omsOrder.setReceiverRegion(umsMemberReceiveAddress.getRegion());            omsOrder.setReceiverPostCode(umsMemberReceiveAddress.getPostCode());//        private String billReceiverEmail;   // 收票人邮箱//        private int confirmStatus; // 确认收货状态：0->未确认；1->已确认//        private int deleteStatus;   // 删除状态：0->未删除；1->已删除//        private int useIntegration; // 下单时使用的积分//        private Date paymentTime;   // 支付时间//        private Date deliveryTime;  // 交货时间            // 确认收货时间，调用API接口生成            Calendar calendar = Calendar.getInstance();            calendar.add(Calendar.DATE,3);// 默认设置下单后送达时间：3天            Date time = calendar.getTime();            omsOrder.setReceiveTime(time);//        private Date commentTime;   // 评论时间//        private Date modifyTime;    // 订单修改时间            orderService.savaOrder(omsOrder);            orderService.flushallOrder(userId, omsOrder.getOrderSn());            OmsOrder order = orderService.getOrderByOrderSn(omsOrder.getOrderSn());            // 3.创建一个订单详细集合            ArrayList<OmsOrderItem> omsOrderItems = new ArrayList<>();            // 4.保存每个订单详细            for (OmsCartItem omsCartItem : omsCartItemList) {                if ("1".equals(omsCartItem.getIsChecked())){                    OmsOrderItem omsOrderItem = new OmsOrderItem();                    omsOrderItem.setOrderId(order.getId());                    omsOrderItem.setOrderSn(order.getOrderSn());                    omsOrderItem.setProductId(omsCartItem.getProductId());                    omsOrderItem.setProductPic(omsCartItem.getProductPic());                    omsOrderItem.setProductName(omsCartItem.getProductName());                    omsOrderItem.setProductAttr(omsCartItem.getProductAttr());                    omsOrderItem.setProductPrice(omsCartItem.getPrice());                    omsOrderItem.setProductSkuId(omsCartItem.getProductSkuId());                    omsOrderItem.setProductSkuCode(omsCartItem.getProductSkuCode());                    omsOrderItem.setProductQuantity(omsCartItem.getQuantity());                    omsOrderItem.setProductBrand(omsCartItem.getProductBrand());                    omsOrderItem.setProductCategoryId(omsCartItem.getProductCategoryId());                    omsOrderItems.add(omsOrderItem);                }            }            order.setOmsOrderItems(omsOrderItems);            // 保存本订单详细            orderItemService.savaOrderItem(omsOrderItems);            // 更新订单详情缓存            orderItemService.flushallOrderItem(omsOrderItems);            // 5.删除购物车中已提交的商品（DB和更新缓存）            cartItemService.delCartByIsChecked(userId);            modelMap.put("umsMemberReceiveAddress",umsMemberReceiveAddress);            modelMap.put("omsOrder",omsOrder);            modelMap.put("omsOrderItemList",omsOrderItems);            return "redirect:http://localhost:8078/index?totalAmount=" + totalAmount + "&orderId=" + omsOrder.getOrderSn();   // 后续重定向到支付页面        }else {            modelMap.put("errMsg","提交空订单，请前往购物车选中商品后提交");            return "tradeFail";        }    }}