package com.atguigu.gmall.search.service.impl;import com.alibaba.dubbo.config.annotation.Reference;import com.alibaba.dubbo.config.annotation.Service;import com.atguigu.gmall.bean.PmsSearchParam;import com.atguigu.gmall.bean.PmsSearchSkuInfo;import com.atguigu.gmall.search.config.SeverLink;import com.atguigu.gmall.service.PmsSearchService;import com.atguigu.gmall.service.PmsSkuService;import io.searchbox.client.JestClient;import io.searchbox.core.Search;import io.searchbox.core.SearchResult;import org.apache.commons.lang3.StringUtils;import org.elasticsearch.index.query.BoolQueryBuilder;import org.elasticsearch.index.query.MatchQueryBuilder;import org.elasticsearch.index.query.TermQueryBuilder;import org.elasticsearch.search.builder.SearchSourceBuilder;import org.springframework.beans.factory.annotation.Autowired;import java.io.IOException;import java.util.ArrayList;import java.util.List;/** * @ClassName PmsSearchServiceImpl * @Author 19680 * @Date 2020/1/27 16:01 * @Version 1.0 * @Description TODO **/@Servicepublic class PmsSearchServiceImpl implements PmsSearchService {    @Autowired    JestClient jestClient;    @Reference    PmsSkuService pmsSkuService;    @Override    public List<PmsSearchSkuInfo> search(PmsSearchParam pmsSearchParam) throws IOException {        List<PmsSearchSkuInfo> pmsSearchSkuInfoList = new ArrayList<>();        String query = "";        query = getSearchSourceBulider(pmsSearchParam);        Search search = new Search.Builder(query).addIndex("gmall_test1").addType("pmsSearchSkuInfo").build();        jestClient = SeverLink.getClink().getObject();        SearchResult execute = jestClient.execute(search);        List<SearchResult.Hit<PmsSearchSkuInfo, Void>> hits = execute.getHits(PmsSearchSkuInfo.class);        for (SearchResult.Hit<PmsSearchSkuInfo, Void> hit : hits) {            PmsSearchSkuInfo source = hit.source;            pmsSearchSkuInfoList.add(source);        }        return pmsSearchSkuInfoList;    }    public String getSearchSourceBulider(PmsSearchParam pmsSearchParam){        String catalog3Id = pmsSearchParam.getCatalog3Id();        String keyword = pmsSearchParam.getKeyword();        String[] valueIds = pmsSearchParam.getValueId();        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();        BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder();        if (StringUtils.isNotBlank(catalog3Id) || catalog3Id != null){            TermQueryBuilder termQueryBuilder = new TermQueryBuilder("catalog3Id",catalog3Id);            boolQueryBuilder.filter(termQueryBuilder);        }        if (valueIds != null && valueIds.length > 0){            for (String valueId : valueIds) {                TermQueryBuilder termQueryBuilder = new TermQueryBuilder("skuAttrValueList.valueId", valueId);                boolQueryBuilder.filter(termQueryBuilder);            }        }        if (StringUtils.isNotBlank(keyword) || keyword != null){            MatchQueryBuilder matchQueryBuilder = new MatchQueryBuilder("skuName", keyword);            boolQueryBuilder.must(matchQueryBuilder);        }        searchSourceBuilder.query(boolQueryBuilder);        searchSourceBuilder.from(0);        searchSourceBuilder.size(200);// 查询的显示长度        return searchSourceBuilder.toString();    }}