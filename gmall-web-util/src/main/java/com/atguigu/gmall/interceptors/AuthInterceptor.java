package com.atguigu.gmall.interceptors;import com.alibaba.fastjson.JSON;import com.atguigu.gmall.annotation.LoginRequired;import com.atguigu.gmall.utils.CookieUtils;import com.atguigu.gmall.utils.HttpclientUtil;import org.apache.commons.lang3.StringUtils;import org.springframework.stereotype.Component;import org.springframework.web.method.HandlerMethod;import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.HashMap;import java.util.Map;/** * @ClassName AuthInterceptors * @Author 19680 * @Date 2020/2/10 20:31 * @Version 1.0 * @Description TODO **/@Componentpublic class AuthInterceptor extends HandlerInterceptorAdapter {/** 方案一：cas中心化  */    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        HandlerMethod handlerMethod = (HandlerMethod) handler;        LoginRequired loginRequired = handlerMethod.getMethodAnnotation(LoginRequired.class);        if (loginRequired == null){            return  true;        }        String token ="";        String oldToken = CookieUtils.getCookiValue(request, "oldToken", true);        String newToken = request.getParameter("newToken");        if (StringUtils.isNotBlank(oldToken)){            token = oldToken;        }        if (StringUtils.isNotBlank(newToken)){            token = newToken;        }        if (StringUtils.isNotBlank(token)){            // 获取请求地址ip            String ip = "";            ip = request.getHeader("X-forwarded-for");            if (StringUtils.isBlank(ip)){                ip = request.getRemoteAddr();                if (StringUtils.isBlank(ip)){                    ip = "127.0.0.1";                }            }            ip = "0:0:0:0:0:0:0:1".equals(ip) ? "127.0.0.1" : ip;            String json = HttpclientUtil.doGet("http://localhost:8077/verify?token=" + token + "&ip=" + ip);            if (StringUtils.isNotBlank(json)){                Map<String, String> resultMap = new HashMap<>();                Map map = JSON.parseObject(json, resultMap.getClass());                String userId = (String) map.get("userId");                String nickname = (String) map.get("nickname");                CookieUtils.setCookie(request,response,"oldToken",token,1000*60*60*5,true);                request.setAttribute("userId",userId);                request.setAttribute("nickname",nickname);                return true;            }        }        if (loginRequired.isMustLogin()){            StringBuffer requestURL = request.getRequestURL();            response.sendRedirect("http://localhost:8077/index?ReturnUrl=" + requestURL);            return false;        }        return true;    }    /** 方案二：去中心化    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        // 获取请求资源是否有@LoginRequired注解        HandlerMethod handlerMethod = (HandlerMethod) handler;        LoginRequired loginRequired = handlerMethod.getMethodAnnotation(LoginRequired.class);        if (loginRequired == null){            return true;        }        // 获取token        String token = "";        String oldToken = CookieUtils.getCookiValue(request, "oldToken", true);        String newToken = request.getParameter("newToken");        // 赋值给token        if (StringUtils.isNotBlank(oldToken)){            token = oldToken;        }        if (StringUtils.isNotBlank(newToken)){            token = newToken;        }        if (StringUtils.isNotBlank(token)){            // 如果存在token，那么去验证            String ip = request.getRemoteAddr();            // 验证方式一：去中心化            String key = "atguigu0830";            Map map = JwtUtil.decode(key, token, ip);            if (map != null){                CookieUtils.setCookie(request,response,"oldToken",token,1000*60,true);                return true;            }        }        // 判断是否必须登录，        if (loginRequired.isMustLogin()){            StringBuffer requestURL = request.getRequestURL();            response.sendRedirect("http://localhost:8077/index?ReturnUrl=" + requestURL);            return false;        }        return true;    }*/}