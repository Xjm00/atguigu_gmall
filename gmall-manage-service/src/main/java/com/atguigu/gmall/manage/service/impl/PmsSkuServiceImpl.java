package com.atguigu.gmall.manage.service.impl;import com.alibaba.dubbo.config.annotation.Service;import com.alibaba.fastjson.JSON;import com.atguigu.gmall.bean.*;import com.atguigu.gmall.manage.mapper.*;import com.atguigu.gmall.service.PmsSkuService;import com.atguigu.gmall.secskill.util.RedisUtil;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import redis.clients.jedis.Jedis;import java.util.Collections;import java.util.List;import java.util.UUID;/** * @ClassName PmsSkuServiceImpl * @Author 19680 * @Date 2020/1/9 17:15 * @Version 1.0 * @Description TODO **/@Servicepublic class PmsSkuServiceImpl implements PmsSkuService {    @Autowired    PmsSkuInfoMapper pmsSkuInfoMapper;    @Autowired    PmsSkuImageMapper pmsSkuImageMapper;    @Autowired    PmsProductImageMapper pmsProductImageMapper;    @Autowired    PmsSkuAttrValueMapper pmsSkuAttrValueMapper;    @Autowired    PmsSkuSaleAttrValueMapper pmsSkuSaleAttrValueMapper;    @Autowired    RedisUtil redisUtil;    @Override    public String saveSkuInfo(PmsSkuInfo pmsSkuInfo) {        try {            // 根据skuInfoId和spuImageId设置图片默认值            List<PmsSkuImage> skuImageList = pmsSkuInfo.getSkuImageList();            // 根据pms_sku_image表中spu_img_id字段，到pms_product_image中获取productId属性            String spuImgId = skuImageList.get(0).getSpuImgId();            PmsProductImage pmsProductImage = pmsProductImageMapper.selectByPrimaryKey(spuImgId);            String productId = pmsProductImage.getProductId();            pmsSkuInfo.setProductId(productId);            // 获取到productId后保存PmsSkuInfo信息            pmsSkuInfoMapper.insertSelective(pmsSkuInfo);            String pmsSkuInfoId = pmsSkuInfo.getId();            // 保存图片信息            for (PmsSkuImage pmsSkuImage : skuImageList) {                pmsSkuImage.setSkuId(pmsSkuInfoId);                pmsSkuImageMapper.insertSelective(pmsSkuImage);            }            // 保存Sku的属性信息            List<PmsSkuAttrValue> skuAttrValueList = pmsSkuInfo.getSkuAttrValueList();            for (PmsSkuAttrValue pmsSkuAttrValue : skuAttrValueList) {                pmsSkuAttrValue.setSkuId(pmsSkuInfoId);                pmsSkuAttrValueMapper.insertSelective(pmsSkuAttrValue);            }            // 保存Sku的属性值信息            List<PmsSkuSaleAttrValue> skuSaleAttrValueList = pmsSkuInfo.getSkuSaleAttrValueList();            for (PmsSkuSaleAttrValue pmsSkuSaleAttrValue : skuSaleAttrValueList) {                pmsSkuSaleAttrValue.setSkuId(pmsSkuInfoId);                pmsSkuSaleAttrValueMapper.insertSelective(pmsSkuSaleAttrValue);            }        } catch (Exception e) {            e.printStackTrace();        }        return "success";    }    public PmsSkuInfo getPmsSkuInfoBySql(String skuid) {        // 获取skuInfo        PmsSkuInfo pmsSkuInfo = new PmsSkuInfo();        pmsSkuInfo.setId(skuid);        PmsSkuInfo skuInfo = pmsSkuInfoMapper.selectOne(pmsSkuInfo);        String skuInfoId = skuInfo.getId();        // 获取skuImage        PmsSkuImage pmsSkuImage = new PmsSkuImage();        pmsSkuImage.setSkuId(skuInfoId);        List<PmsSkuImage> skuImageList = pmsSkuImageMapper.select(pmsSkuImage);        skuInfo.setSkuImageList(skuImageList);        // 获取skuAttrValue        PmsSkuAttrValue pmsSkuAttrValue = new PmsSkuAttrValue();        pmsSkuAttrValue.setSkuId(skuInfoId);        List<PmsSkuAttrValue> skuAttrValueList = pmsSkuAttrValueMapper.select(pmsSkuAttrValue);        skuInfo.setSkuAttrValueList(skuAttrValueList);        return skuInfo;    }    /*****使用redis缓存技术**************************************************/    @Override    public PmsSkuInfo getPmsSkuInfo(String skuid) {//        PmsSkuInfo pmsSkuInfo = null;//        Jedis jedis = null;//        try {//            // 1.先到redis查询//            jedis = redisUtil.getJedis();//            String key = "skuid:" + skuid + ":info";//            String skuInfoByJedisJson = jedis.get(key);//            if (StringUtils.isNotBlank(skuInfoByJedisJson)) {// StringUtils.isNotBlank():判断返回是否"不"为空//                pmsSkuInfo = JSON.parseObject(skuInfoByJedisJson, PmsSkuInfo.class);//            } else {//                // 使用分布式锁解决缓存击穿、雪崩//                String uuid = UUID.randomUUID().toString();//                String OK = jedis.set("skuid" + skuid + ":lock", uuid, "nx", "ex", 10);//                if (StringUtils.isNotBlank(OK)) {//                    // 2.缓存中如不存在查询信息，那么到数据库中查询//                    pmsSkuInfo = getPmsSkuInfoBySql(skuid);//                    if (pmsSkuInfo != null) {//                        // 从数据库中查询到之后，把数据设置到缓存中//                        String value = JSON.toJSONString(pmsSkuInfo);//                        String result = jedis.set(key, value);// 返回OK//                        String script = "if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end";//                        jedis.eval(script, Collections.singletonList("sku:" + skuid + ":lock"), Collections.singletonList(uuid));//                    }//                } else {// 如何没有拿到分布式锁，那么等待3秒时间，然后再次调用本方法，再次尝试获取分布式锁，直到获取到时//                    try {//                        Thread.sleep(3000);//                    } catch (InterruptedException e) {//                        e.printStackTrace();//                    }//                    return getPmsSkuInfo(skuid);//                }//            }//        } finally {//            jedis.close();//        }        return testRewrite(skuid);    }    public PmsSkuInfo testRewrite(String skuid) {        PmsSkuInfo pmsSkuInfo = null;        Jedis jedis = null;        try {            jedis = redisUtil.getJedis();            String pmsSkuInfoJson = jedis.get("skuid:" + skuid + ":info");            if (StringUtils.isNotBlank(pmsSkuInfoJson)) {                pmsSkuInfo = JSON.parseObject(pmsSkuInfoJson, PmsSkuInfo.class);            } else {                String uuid = UUID.randomUUID().toString();                String OK = jedis.set("skuid:" + skuid + ":info", "uuid", "nx", "ex", 10);                if (StringUtils.isNotBlank(OK)) {                    pmsSkuInfo = getPmsSkuInfoBySql(skuid);                    String skuInfoJson = JSON.toJSONString(pmsSkuInfo);                    jedis.set("skuid:" + skuid + ":info", skuInfoJson);                    String script = "if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end";                    jedis.eval(script, Collections.singletonList("sku:" + skuid + ":lock"), Collections.singletonList(uuid));                } else {                    try {                        Thread.sleep(3000);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    return testRewrite(skuid);                }            }        } finally {            jedis.close();        }        return pmsSkuInfo;    }    @Override    public List<PmsSkuInfo> getPmsSkuSaleAttrValueBySpuId(String productId) {        PmsSkuInfo pmsSkuInfo = new PmsSkuInfo();        pmsSkuInfo.setProductId(productId);        List<PmsSkuInfo> skuInfos = pmsSkuInfoMapper.select(pmsSkuInfo);        for (PmsSkuInfo skuInfo : skuInfos) {            PmsSkuSaleAttrValue pmsSkuSaleAttrValue = new PmsSkuSaleAttrValue();            pmsSkuSaleAttrValue.setSkuId(skuInfo.getId());            List<PmsSkuSaleAttrValue> pmsSkuSaleAttrValueList = pmsSkuSaleAttrValueMapper.select(pmsSkuSaleAttrValue);            skuInfo.setSkuSaleAttrValueList(pmsSkuSaleAttrValueList);        }        return skuInfos;    }    @Override    public List<PmsSkuInfo> getAllSkuInfo() {        List<PmsSkuInfo> skuInfoList = pmsSkuInfoMapper.selectAll();        for (PmsSkuInfo pmsSkuInfo : skuInfoList) {            String infoId = pmsSkuInfo.getId();            PmsSkuAttrValue skuAttrValue = new PmsSkuAttrValue();            skuAttrValue.setSkuId(infoId);            List<PmsSkuAttrValue> skuAttrValues = pmsSkuAttrValueMapper.select(skuAttrValue);            pmsSkuInfo.setSkuAttrValueList(skuAttrValues);        }        return skuInfoList;    }}