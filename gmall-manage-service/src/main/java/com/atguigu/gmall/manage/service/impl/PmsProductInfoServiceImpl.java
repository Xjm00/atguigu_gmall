package com.atguigu.gmall.manage.service.impl;import com.alibaba.dubbo.config.annotation.Service;import com.atguigu.gmall.bean.*;import com.atguigu.gmall.manage.mapper.*;import com.atguigu.gmall.service.PmsProductInfoService;import org.springframework.beans.factory.annotation.Autowired;import java.util.List;/** * @ClassName PmsProductInfoServiceImpl * @Author 19680 * @Date 2020/1/7 20:19 * @Version 1.0        * @Description TODO        **/@Servicepublic class PmsProductInfoServiceImpl implements PmsProductInfoService {    @Autowired    PmsProductInfoMapper pmsProductInfoMapper;    @Autowired    PmsProductSaleAttrMapper pmsProductSaleAttrMapper;    @Autowired    PmsProductSaleAttrValueMapper pmsProductSaleAttrValuemMapper;    @Autowired    PmsProductImageMapper pmsProductImageMapper;    @Autowired    PmsSkuInfoMapper pmsSkuInfoMapper;    @Override    public void saveSpuInfo(PmsProductInfo pmsProductInfo) {        pmsProductInfoMapper.insertSelective(pmsProductInfo);        String pmsProductInfoId = pmsProductInfo.getId();        // 保存图片信息        List<PmsProductImage> spuImageList = pmsProductInfo.getSpuImageList();        for (PmsProductImage pmsProductImage : spuImageList) {            pmsProductImage.setProductId(pmsProductInfoId);            pmsProductImageMapper.insertSelective(pmsProductImage);        }        List<PmsProductSaleAttr> spuSaleAttrList = pmsProductInfo.getSpuSaleAttrList();        for (PmsProductSaleAttr pmsProductSaleAttr : spuSaleAttrList) {            pmsProductSaleAttr.setProductId(pmsProductInfoId);            pmsProductSaleAttrMapper.insertSelective(pmsProductSaleAttr);            String saleAttrId = pmsProductSaleAttr.getSaleAttrId();            List<PmsProductSaleAttrValue> spuSaleAttrValueList = pmsProductSaleAttr.getSpuSaleAttrValueList();            for (PmsProductSaleAttrValue pmsProductSaleAttrValue : spuSaleAttrValueList) {                pmsProductSaleAttrValue.setProductId(pmsProductInfoId);                pmsProductSaleAttrValuemMapper.insertSelective(pmsProductSaleAttrValue);            }        }    }    @Override    public List<PmsProductInfo> getPmsProductInfoListByCatakog3Id(String catalog3Id) {        PmsProductInfo pmsProductInfo = new PmsProductInfo();        pmsProductInfo.setCatalog3Id(catalog3Id);        return pmsProductInfoMapper.select(pmsProductInfo);    }    @Override    public List<PmsProductImage> getProductImageListBySpuId(String spuId) {        PmsProductImage pmsProductImage = new PmsProductImage();        pmsProductImage.setProductId(spuId);        return pmsProductImageMapper.select(pmsProductImage);    }    @Override    public List<PmsProductSaleAttr> getPmsProductInfoListBySpuId(String spuId) {        // 1.获取spu属性        PmsProductSaleAttr pmsProductSaleAttr = new PmsProductSaleAttr();        pmsProductSaleAttr.setProductId(spuId);        List<PmsProductSaleAttr> pmsProductSaleAttrs = pmsProductSaleAttrMapper.select(pmsProductSaleAttr);        for (PmsProductSaleAttr productSaleAttr : pmsProductSaleAttrs) {            // 2.获取各spu的属性值            PmsProductSaleAttrValue pmsProductSaleAttrValue = new PmsProductSaleAttrValue();            pmsProductSaleAttrValue.setProductId(spuId);            pmsProductSaleAttrValue.setSaleAttrId(productSaleAttr.getSaleAttrId());            List<PmsProductSaleAttrValue> productSaleAttrValuesList = pmsProductSaleAttrValuemMapper.select(pmsProductSaleAttrValue);            // 3.将spu属性值给到spu属性            productSaleAttr.setSpuSaleAttrValueList(productSaleAttrValuesList);        }        // 4.返回spu信息列表        return pmsProductSaleAttrs;    }    @Override    public List<PmsProductInfo> getPmsProductInfosBySpuId(String spuId) {        PmsProductInfo pmsProductInfo = new PmsProductInfo();        pmsProductInfo.setId(spuId);        return pmsProductInfoMapper.select(pmsProductInfo);    }}